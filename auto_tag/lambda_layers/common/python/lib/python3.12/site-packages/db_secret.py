# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

"""
This module provides utilities for accessing AWS Secrets Manager to retrieve
confidential information like database credentials. It defines functions to
get a Secrets Manager client, fetch a secret, and establish a connection to
an RDS instance using the retrieved secret.

Functions:
    get_secrets_manager_client(region_name): Returns a boto3 Secrets Manager client.
    get_secret(): Retrieves the secret from AWS Secrets Manager.
    get_rds_connection(): Establishes a connection to an RDS instance.
"""


import json
import os

import boto3
import psycopg2
from botocore.exceptions import ClientError

# Cache the client to avoid recreating it on each function call
_SECRETS_MANAGER_CLIENT = None


def get_secrets_manager_client(region_name):
    """
    Get or create a Secrets Manager client for the specified region.

    This function initializes a boto3 client to interact with AWS Secrets Manager.
    It uses a global variable, _SECRETS_MANAGER_CLIENT, to store the client instance.
    On subsequent calls, the existing client will be returned to avoid redundant
    initialization, assuming the client was previously created with the same region.

    Parameters:
        region_name (str): The name of the region for which to create the Secrets Manager client.

    Returns:
        object: A boto3 Secrets Manager client for the given region.
    """
    global _SECRETS_MANAGER_CLIENT
    if _SECRETS_MANAGER_CLIENT is None:
        _SECRETS_MANAGER_CLIENT = boto3.client(service_name="secretsmanager", region_name=region_name)
    return _SECRETS_MANAGER_CLIENT


def get_secret():
    """
    Get the secret from the Secrets Manager.
    This function uses the 'REGION_NAME' and 'SECRET_NAME' environment variables.
    If these variables are not set, it raises a ValueError.
    The secret is returned as a string.

    The function uses a global variable to cache the Secrets Manager client.
    This is to avoid creating a new client on each function call.

    Returns:
        str: The secret value.


    """
    region_name = os.environ.get("REGION_NAME")
    secret_name = os.environ.get("SECRET_NAME")

    # Provide more detailed error messages
    if not region_name:
        raise ValueError("Error: 'REGION_NAME' environment variable is missing.")
    if not secret_name:
        raise ValueError("Error: 'SECRET_NAME' environment variable is missing.")

    client = get_secrets_manager_client(region_name)

    try:
        get_secret_value_response = client.get_secret_value(SecretId=secret_name)
    except ClientError as e:
        # Handle specific cases or re-raise with additional context if necessary
        error_message = e.response["Error"]["Message"]
        raise Exception(f"Could not retrieve secret: {error_message}") from e

    secret = get_secret_value_response["SecretString"]
    return secret


def get_rds_connection():
    """
    Establishes a connection to an RDS instance using credentials obtained from the Secrets Manager.

    This function retrieves database credentials from the Secrets Manager by calling the `get_secret` function.
    It uses the 'DATABASE_NAME' environment variable to get the name of the database to connect to.
    If 'DATABASE_NAME' is not set, a ValueError is raised.

    Returns:
        psycopg2.extensions.connection: A new database connection instance.

    Raises:
        JSONDecodeError: If the secret string obtained from `get_secret` is not valid JSON.
        KeyError: If the necessary keys are missing in the JSON secret.
        psycopg2.OperationalError: If the connection to the database fails.
    """
    secrets = json.loads(get_secret())

    # Get the database name from the environment variables
    database_name = os.environ.get("DATABASE_NAME")
    if database_name is None:
        raise ValueError("The 'DATABASE_NAME' environment variable must be set.")

    return psycopg2.connect(
        host=secrets["host"],
        database=os.environ.get("DATABASE_NAME"),
        user=secrets["username"],
        password=secrets["password"],
    )
